from typing import Tuple, List, overload
import numpy
import pyposelib
from .robust import *
from .minimal_solvers import *

class RansacOptions:
    max_iterations: int = 100_000
    min_iterations: int = 1_000
    dyn_num_trials_mult: float = 3.0
    success_prob: float = 0.9999
    max_reproj_error: float = 12.0
    max_epipolar_error: float = 1.0
    seed: int = 0
    progressive_sampling: bool = False
    max_prosac_iterations: int = 100_000
    real_focal_check: bool = False
    def __init__(self, kwargs:dict = None) -> None:...

class BundleOptions:
    max_iterations: int = 100
    loss_type: pyposelib.LossType = pyposelib.LossType.CAUCHY
    loss_scale: float = 1.0
    gradient_tol: float = 1e-10
    step_tol: float = 1e-8
    initial_lambda: float = 1e-3
    min_lambda: float = 1e-10
    max_lambda: float = 1e10
    verbose: bool = False
    def __init__(self, kwargs:dict = None) -> None:...

class CameraPose:
    q: numpy.ndarray[numpy.float64[4, 1]]
    t: numpy.ndarray[numpy.float64[3, 1]]
    def R(self) -> numpy.ndarray[numpy.float64[3, 3]]:...
    def rotate(self, p: numpy.ndarray[numpy.float64[3, 1]]) -> numpy.ndarray[numpy.float64[3, 1]]:...
    def derotate(self, p: numpy.ndarray[numpy.float64[3, 1]]) -> numpy.ndarray[numpy.float64[3, 1]]:...
    def apply(self, p: numpy.ndarray[numpy.float64[3, 1]]) -> numpy.ndarray[numpy.float64[3, 1]]:...
    def center(self) -> numpy.ndarray[numpy.float64[3, 1]]:...
    def __init__(self, q: numpy.ndarray[numpy.float64[4, 1]], t: numpy.ndarray[numpy.float64[3, 1]]) -> None:...
    @overload
    def __init__(self, R: numpy.ndarray[numpy.float64[3, 3]], t: numpy.ndarray[numpy.float64[3, 1]]) -> None:...
    @overload
    def __init__(self) -> None:...    
    
class Camera:
    def __init__(self) -> None:...
    def __init__(self, model_name: str, params: numpy.ndarray[numpy.float64], width: int, height: int) -> None:...
    def __init__(self, model_id: int, params: numpy.ndarray[numpy.float64], width: int, height: int) -> None:...
    def project(self, p: numpy.ndarray[numpy.float64[3, 1]]) -> numpy.ndarray[numpy.float64[2, 1]]:...
    def unproject(self, p: numpy.ndarray[numpy.float64[2, 1]]) -> numpy.ndarray[numpy.float64[3, 1]]:...
    def project_with_jac(self, p: numpy.ndarray[numpy.float64[3, 1]]) -> Tuple[numpy.ndarray[numpy.float64[2, 1]], numpy.ndarray[numpy.float64[2, 3]]]:...
    def rescale(self, scale: float) -> None:...
    def model_name(self) -> str:...
    def focal(self) -> float:...
    def focal_x(self) -> float:...
    def focal_y(self) -> float:...
    def principal_point(self) -> numpy.ndarray[numpy.float64[2, 1]]:...
    def initialize_from_txt(self, line: str) -> None:...
    def to_txt(self) -> str:...
    def id_from_string(self, model_name: str) -> int:...
    def name_from_id(self, id: int) -> str:...


class Image:
    def __init__(self) -> None:...
    def __init__(self, pose: CameraPose, camera: Camera) -> None:...